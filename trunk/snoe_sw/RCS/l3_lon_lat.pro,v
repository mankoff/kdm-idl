head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2002.09.24.21.26.25;	author mankoff;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.20.23.41.23;	author mankoff;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.10.07.08.02;	author mankoff;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.01.22.58.52;	author mankoff;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.26.20.08.19;	author mankoff;	state Exp;
branches;
next	;


desc
@@


1.5
log
@added check for accessing day past EOF
@
text
@; $Id: l3_lon_lat.pro,v 1.4 2002/09/20 23:41:23 mankoff Exp mankoff $
;
; $Author: mankoff $
; $Revision: 1.4 $
; $Date: 2002/09/20 23:41:23 $
;

PRO L3_LON_LAT, coords, yyyyddd, data, altitude=altitude, $
                verbose=verbose

;+
; NAME:
;	L3_LON_LAT
;
; PURPOSE:
;       This procedure opens the L3 files, and returns one days worth
;       of data in a regularly gridded lon/lat array
;
; CATEGORY: SNOE, Database
;
; CALLING SEQUENCE:
;       L3_LON_LAT, coords, yyyyddd, data, altitude=altitude
;
; INPUTS:
;       coords:  'geo' or 'mag'
;       yyyyddd: the date of the data to return
;
; KEYWORD PARAMETERS:
;       ALTITUDE: Set this to the altitude (in kilometers) to
;       use. Defaults to 106km.
;
; OUTPUTS:
;       data: An array
;
; PROCEDURE:
;	You can describe the foobar superfloatation method being used here.
;	You might not need this section for your routine.
;
; EXAMPLE:
;       L3_LON_LAT, 'geo', 1998079, d, alt=106
;
; MODIFICATION HISTORY:
;   Written by:	CAB; 1999.
;   2002-09-01: KDM; /swap_if_big_endian, partial documentation
;   2002-09-09; KDM; added _EXTRA=e to OPEN
;
;-

IF ( N_PARAMS() NE 3 ) THEN BEGIN
    message, 'Usage: L3_LON_LAT, coords, yyyyddd, data', /cont
    message, "Use DOC_LIBRARY for help", /CONT
    return
ENDIF

IF ( NOT KEYWORD_SET( altitude ) ) THEN altitude = 106
alt_ind = max( where( !SNOE.f.l3_alt GT altitude ) )

IF ( KEYWORD_SET( verbose ) ) THEN $
  print, 'Altitude/Index: ' + $
  STRTRIM( !SNOE.f.l3_alt[alt_ind], 2 ) + '   ' + $
  STRTRIM( alt_ind, 2 )

file = STRCOMPRESS( 'NO_2_den_' + coords + '.dat', /REMOVE_ALL)
OPENR, lun, file , /GET_LUN,/SWAP_IF_BIG_ENDIAN, _EXTRA=e
dd = ASSOC( lun, !SNOE.f.l3 )
dom = SNOE_DATE( yyyyddd, /from_yyyyddd, /to_dom )
on_ioerror, eof_err
ddd = dd[ dom ]
FREE_LUN, lun

;;; day requested past end of file 
IF ( 0 ) THEN BEGIN
    eof_err:
    message, "End Of File", /CONT
    free_lun, lun
    data = fltarr( 16, 37 ) -999
    return
ENDIF

den = REFORM( ddd[ 7:43, alt_ind, * ] )
den_sum = FLTARR( 15, 37 )

FOR latIndex = 2, 34 DO BEGIN
    lonRow = REFORM( ddd[ latIndex, 32, * ] )
    lonIndex = 0
    FOR lon = -180, ( 180 - 24 ), 24 DO BEGIN
        thisLon = WHERE(( lonRow GT lon ) AND ( lonRow LE (lon+24)) $
         AND ( lonRow NE 0.0 ) AND (reform(den[latIndex,*]) GT 1e6 ))
        
        IF ( thisLon[ 0 ] NE -1 ) THEN BEGIN
            thisDen = REFORM( den[ latIndex, thisLon ] )
            den_sum[ lonIndex, latIndex ] = $
              TOTAL( thisDen ) / $
              N_ELEMENTS( thisDen )
        ENDIF
        
        lonIndex = lonIndex + 1
    ENDFOR
ENDFOR        

data = FLTARR( (15+1), 37 )
data[0:14,*] = den_sum[0:14,*]
data[15,*] = den_sum[0,*]
data[*,0:2] = total(data[1:7,2])/7
data[*,34:36] = total(data[9:15,34])/7

IF ( KEYWORD_SET( verbose ) ) THEN BEGIN
    PRINT, "North", max(data(*,24:34))/1e7, !c mod 16, !c/16+24
    PRINT, "South", max(data(*, 2:12))/1e7, !c mod 16, !c/16+2
ENDIF

RETURN
END

;
; $Log: l3_lon_lat.pro,v $
; Revision 1.4  2002/09/20 23:41:23  mankoff
; L3 DB is now has 52 lats (-55 to 55). Changed code to handle this
;
; Revision 1.3  2002/09/10 07:08:02  mankoff
; added _EXTRA=e to open, so it can be use on old LASP (big_endian) data
; withou modification
;
; Revision 1.2  2002/09/01 22:58:52  mankoff
; /swap_if_big_endian. Partial documentation
;
; Revision 1.1  2002/07/26 20:08:19  mankoff
; Initial revision
;
;
@


1.4
log
@L3 DB is now has 52 lats (-55 to 55). Changed code to handle this
@
text
@d1 1
a1 1
; $Id: l3_lon_lat.pro,v 1.3 2002/09/10 07:08:02 mankoff Exp mankoff $
d4 2
a5 2
; $Revision: 1.3 $
; $Date: 2002/09/10 07:08:02 $
d67 1
d71 9
d117 3
@


1.3
log
@added _EXTRA=e to open, so it can be use on old LASP (big_endian) data
withou modification
@
text
@d1 1
a1 1
; $Id: l3_lon_lat.pro,v 1.2 2002/09/01 22:58:52 mankoff Exp mankoff $
d4 2
a5 2
; $Revision: 1.2 $
; $Date: 2002/09/01 22:58:52 $
d70 1
a70 1
den = REFORM( ddd[ 0:36, alt_ind, * ] )
d107 4
@


1.2
log
@/swap_if_big_endian. Partial documentation
@
text
@d1 1
a1 1
; $Id: l3_lon_lat.pro,v 1.1 2002/07/26 20:08:19 mankoff Exp mankoff $
d4 2
a5 2
; $Revision: 1.1 $
; $Date: 2002/07/26 20:08:19 $
d45 1
d64 1
a64 1
OPENR, lun, file , /GET_LUN,/SWAP_IF_BIG_ENDIAN
d107 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
; $Id$
d3 3
a5 3
; $Author$
; $Revision$
; $Date$
d13 1
a13 1
;	ROUTINE_NAME
d16 4
a19 7
;	Tell what your routine does here.  I like to start with the words:
;	"This function (or procedure) ..."
;	Try to use the active, present tense.
;
; CATEGORY:
;	Put a category (or categories) here.  For example:
;	SNOE, Imaging, Map, Orbit, Foo
d22 1
a22 12
;	Write the calling sequence here. Include only positional parameters
;	(i.e., NO KEYWORDS). For procedures, use the form:
;
;	ROUTINE_NAME, Parameter1, Parameter2, Foobar
;
;	Note that the routine name is ALL CAPS and arguments have Initial
;	Caps.  For functions, use the form:
; 
;	Result = FUNCTION_NAME(Parameter1, Parameter2, Foobar)
;
;	Always use the "Result = " part to begin. This makes it super-obvious
;	to the user that this routine is a function!
d25 2
a26 2
;	Parm1:	Describe the positional input parameters here. Note again
;		that positional parameters are shown with Initial Caps.
a27 4
; OPTIONAL INPUTS:
;	Parm2:	Describe optional inputs here. If you don't have any, just
;		delete this section.
;	
d29 2
a30 8
;	KEY1:	Document keyword parameters like this. Note that the keyword
;		is shown in ALL CAPS!
;
;	KEY2:	Yet another keyword. Try to use the active, present tense
;		when describing your keywords.  For example, if this keyword
;		is just a set or unset flag, say something like:
;		"Set this keyword to use foobar subfloatation. The default
;		 is foobar superfloatation."
d33 1
a33 19
;	Describe any outputs here.  For example, "This function returns the
;	foobar superflimpt version of the input array."  This is where you
;	should also document the return value for functions.
;
; OPTIONAL OUTPUTS:
;	Describe optional outputs here.  If the routine doesn't have any, 
;	just delete this section.
;
; COMMON BLOCKS:
;	BLOCK1:	Describe any common blocks here. If there are no COMMON
;		blocks, just delete this entry.
;
; SIDE EFFECTS:
;	Describe "side effects" here.  There aren't any?  Well, just delete
;	this entry.
;
; RESTRICTIONS:
;	Describe any "restrictions" here.  Delete this section if there are
;	no important restrictions.
d40 1
a40 11
;	Please provide a simple example here. An example from the PICKFILE
;	documentation is shown below. Please try to include examples that
;       do not rely on variables or data files that are not defined in
;       the example code. Your example should execute properly if typed
;       in at the IDL command line with no other preparation.
;
;	Create a PICKFILE widget that lets users select only files with 
;	the extensions 'pro' and 'dat'.  Use the 'Select File to Read' title 
;	and store the name of the selected file in the variable F.  Enter:
;
;		F = PICKFILE(/READ, FILTER = ['pro', 'dat'])
d43 2
a44 3
; 	Written by:	Your name here, Date.
;	2002-03-30: XYZ Made a change. Remember to change the stuff above 
;			if you add a new keyword or something!
d63 1
a63 1
OPENR, lun, file , /GET_LUN,/SWAP_ENDIAN
d105 4
a108 1
; $Log$
@
